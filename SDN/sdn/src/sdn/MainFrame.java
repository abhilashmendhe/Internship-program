/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sdn;

import CompressionNetworkOps.SenderComp;
import DOSNetworkOps.FetchMaker;
import DOSNetworkOps.InsertMaker;
import DOSNetworkOps.Receiver;
import DateTime.CurrentDate;
import DateTime.CurrentTime;
import FileOps.ReadFiles;
import FileOps.WriteFiles;
import DOSNetworkOps.SenderDOS;
import DOSNetworkOps.Sender2;
import ENCNetworkOps.SenderENC;
import fuzzy.FuzzyClassification;
import fuzzy.Ranges;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author abhilash
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public static String getfromdos = "";
    public MainFrame() {
        super("SDN");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Select File:-");

        jTextField1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("SUBMIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("CLEAR");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(116, 116, 116)
                        .addComponent(jButton3)
                        .addGap(31, 31, 31))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jButton1)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(82, 82, 82))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        JFileChooser jf = new JFileChooser();
        jf.showOpenDialog(jf);
        File f = jf.getCurrentDirectory();
        jTextField1.setText(f.getAbsolutePath());
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String path = jTextField1.getText();
        //Socket connectclient = new Socket("192.168.1.44", 3338);
        //Sender send = new Sender(connectclient, "/home/abhilash/sdnfiles", "/root/Desktop/sdnfiles/");
        File f = new File(path);
        File allfiles[] = f.listFiles();                    
        ArrayList all = new ArrayList();
        System.out.println("Files");
        for(int i=0; i<allfiles.length; i++)
        {
            String time = new CurrentTime().getTime();
            String date = new CurrentDate().getDate();
            String timespl[] = time.split(":");
            String hr = timespl[0];
            String min = timespl[1];
            String sec = timespl[2];
            String secspl[] = sec.split(" ");
            Random r = new Random();
            int randomsecs = r.nextInt(60);
            secspl[0] = Integer.toString(randomsecs);
            //System.out.println(randomsecs);
            time = hr+":"+min+":"+secspl[0]+"_"+secspl[1];
            String date_time = time+" "+date;
            ArrayList temp = new ArrayList();
            String s = new RandomIp().genrateIp();
            
            temp.add(allfiles[i].getName());
            temp.add(s);
            temp.add(allfiles[i].length());
            temp.add(date_time);
            all.add(temp);
            
        }
        ArrayList sorted = new Sort().getsort(all);
        for(int i=0; i<sorted.size(); i++)
        {
            ArrayList te = (ArrayList) sorted.get(i);
            System.out.println(te);
        }
        ArrayList t1 = (ArrayList) sorted.get(0);
        ArrayList t2 = (ArrayList) sorted.get(sorted.size()-1);
        long size1 = (long) t1.get(2);
        long size2 = (long) t2.get(2);
        long distance = size2 - size1;
        System.out.println("\n");
        int dist = (int) distance;
        System.out.println("Distance: "+dist);
        System.out.println("\n");
        System.out.println("Ranges");
        ArrayList ranges = new Ranges().getRanges(dist);
        for(int i=0; i<ranges.size(); i++)
        {
            ArrayList t = (ArrayList) ranges.get(i);
            System.out.println(t);
        }
        System.out.println("\n");
        System.out.println("Fuzzy Clustering");
        ArrayList clusterdata = new FuzzyClassification().classify(sorted, ranges);
        for(int i=0; i<clusterdata.size(); i++)
        {
            ArrayList t = (ArrayList) clusterdata.get(i);
            System.out.println("Cluster: "+i);
            
            for(int j=0; j<t.size(); j++)
            {
                ArrayList temp = (ArrayList) t.get(j);
                System.out.println(temp);
            }
            System.out.println("");
        }
        ArrayList veryhighcluster = (ArrayList)clusterdata.get(0);
        ArrayList highcluster = (ArrayList) clusterdata.get(1);
        ArrayList addclust = new ArrayList();
        addclust.addAll(veryhighcluster);
        addclust.addAll(highcluster);
        addclust.add("endtag");
        
//        System.out.println("sendfiles to dos");
//        for(int i=0; i<addclust.size()-1; i++)
//        {
//            ArrayList temp = (ArrayList) addclust.get(i);
//            String filename = (String)temp.get(0);
//            String path2 = jTextField1.getText()+"/"+filename;
//            try {
//                Socket sendtodos = new Socket("10.0.2.8", 3338);
//                Sender s = new Sender(sendtodos, path2, "/home/root/Desktop/dosfiles/");
//            } catch (IOException ex) {
//                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
        File f2 = new File("/home/abhilash/Desktop/dosfiles");
        System.out.println(f2.getAbsolutePath());
        System.out.println("Size added: "+addclust.size());
        String allfilesindos[] = f2.list();
        System.out.println("Files: "+allfilesindos.length);
        for(int i=0; i<addclust.size()-1; i++)
        {
            ArrayList temp = (ArrayList) addclust.get(i);
            String filename = (String) temp.get(0);
            //System.out.println(filename);
            boolean flag = true;
            for(int j=0; j<allfilesindos.length; j++)
            {
               
                if(filename.equals(allfilesindos[j]))
                {
                    flag = false;
                    break;
                }
            }
            System.out.println(flag+" "+i);
            if(flag)
            {

                    String readpath = jTextField1.getText()+"/"+filename;
                    String writepath = "/home/abhilash/Desktop/dosfiles/"+filename;
                    
                    try {
                        int readby[] = new ReadFiles().file(readpath);
                        new WriteFiles().write(writepath, readby);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            
            
        }
        
        System.out.println("DOS server connection starts");
        
        String filesize = new FetchMaker().fetch();
        int fetchfilesize = Integer.parseInt(filesize);
        System.out.println(filesize);
        int sendfilesize = 0;
        for(int i=0; i<addclust.size(); i++)
        {
            ArrayList temps = (ArrayList) addclust.get(i);
            int send = (int) temps.get(2);
            sendfilesize += send;
        }
        sendfilesize = sendfilesize/100000;
        
        Socket connectclient;
        try {
           connectclient = new Socket("192.168.1.35", 3338);
           SenderDOS send;
           if(sendfilesize < fetchfilesize)
               send = new SenderDOS(connectclient, "/home/abhilash/Desktop/dosfiles", "E:\\DOSFiles\\");
            
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for(int i=0; i<addclust.size(); i++)
        {
            String temps = addclust.get(i).toString();
            new Sender2().send(temps);
            //System.out.println(temps);
        }
        Receiver r = new Receiver();
        r.start();
        String totaltimedate = new CurrentDate().getDate() +" "+ new CurrentTime().getTime();
        
        while(true)
        {
            if(getfromdos.length() > 0)
            {
                r.stop();
                break;
            }
            System.out.println();
        }
        System.out.println(getfromdos);

        
        
        String splrecdata[]= getfromdos.split("#");
        try {
            new InsertMaker().insertOps(splrecdata[0], splrecdata[1], totaltimedate);
        
            } catch (Exception e) {
        }
        
//        

          
           

//        for(int i=0; i<addclust.size(); i++)
//        {
//            String temps = addclust.get(i).toString();
//            new Sender2().send(temps);
//            //System.out.println(temps);
//        }
        
//        System.out.println("DPI server connection starts");
//        
//        try {
//            connectclient = new Socket("10.0.2.8", 3339);
//            SenderDOS send = new SenderDOS(connectclient, "/home/abhilash/Desktop/dosfiles", "/root/Desktop/dpifiles/");
//            connectclient.close();
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        
//        System.out.println("Send to Enc server");
//        try {
//            Socket send_enc = new Socket("10.0.2.8",3340);
//            SenderENC se_enc = new SenderENC(send_enc, "/home/abhilash/Desktop/dosfiles", "E:\\EncFiles\\");
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
//        System.out.println("Send to Compression server");
//        try {
//            Socket send_comp = new Socket("10.0.2.8",3341);
//            SenderComp se_comp = new SenderComp(send_comp, "/home/abhilash/Desktop/dosfiles", "E:\\EncFiles\\");
//        } catch (IOException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
